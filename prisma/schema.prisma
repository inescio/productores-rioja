// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(PRODUCTOR)
  creadoEn      DateTime  @default(now())
  actualizadoEn DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  productor     Productor?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  PRODUCTOR
}

model Categoria {
  id          String    @id @default(cuid())
  nombre      String    @unique
  descripcion String?
  icono       String?   // Para iconos FontAwesome, Lucide, etc.
  color       String?   // Hex color para UI (#FF5733)
  activa      Boolean   @default(true)
  creadoEn    DateTime  @default(now())
  actualizadoEn DateTime @updatedAt
  productores Productor[]
}

model Productor {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  nombre          String
  ubicacion       String
  telefono        String?
  whatsapp        String?   // Formato: +549123456789
  instagram       String?   // Solo el username (sin @)
  descripcion     String?
  imagen          String?
  rating          Float?    @default(0.0)
  totalReviews    Int       @default(0)  // Para calcular rating promedio
  categoriaId     String
  categoria       Categoria @relation(fields: [categoriaId], references: [id])
  productos       Producto[]
  aprobado        Boolean   @default(false)
  fechaSolicitud  DateTime  @default(now())
  fechaAprobacion DateTime?
  creadoEn        DateTime  @default(now())
  actualizadoEn   DateTime  @updatedAt

  @@index([userId])
  @@index([categoriaId])
  @@index([aprobado])
}

model Producto {
  id            String    @id @default(cuid())
  nombre        String
  descripcion   String?
  imagen        String?
  precio        Decimal?  @db.Decimal(10, 2)  // Precisi√≥n para montos
  unidad        String?   // kg, litro, unidad, etc.
  disponible    Boolean   @default(true)
  destacado     Boolean   @default(false)     // Para productos destacados
  stock         Int?      // Cantidad disponible (opcional)
  productorId   String
  productor     Productor @relation(fields: [productorId], references: [id], onDelete: Cascade)
  creadoEn      DateTime  @default(now())
  actualizadoEn DateTime  @updatedAt

  @@index([productorId])
  @@index([disponible])
  @@index([destacado])
}